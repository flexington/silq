{
  "api/flx.SILQ.Core.Interpreter.html": {
    "href": "api/flx.SILQ.Core.Interpreter.html",
    "title": "Class Interpreter | SILQ",
    "summary": "Class Interpreter Namespace flx.SILQ.Core Assembly flx.SILQ.dll Provides core evaluation logic for the SILQ interpreter, including arithmetic operations, type checking, and expression evaluation. public class Interpreter : IVisitor<object>, IVisitor Inheritance object Interpreter Implements IVisitor<object> IVisitor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Interpret(List<Statement>) Interprets a list of statements by executing each statement in order. Throws a RuntimeError if an error occurs during execution. public void Interpret(List<Statement> statements) Parameters statements List<Statement> The list of statements to interpret. Interpret(Expression) Interprets the given expression by evaluating it and converting the result to a string. public string Interpret(Expression expression) Parameters expression Expression The expression to interpret. Returns string The string representation of the evaluated expression. Visit(Binary) Visits a Binary expression and evaluates it according to its operator and operands. public object Visit(Binary binary) Parameters binary Binary The binary expression to evaluate. Returns object The result of the binary operation. Visit(Grouping) Visits a Grouping expression and evaluates its contained expression. public object Visit(Grouping grouping) Parameters grouping Grouping The grouping expression to evaluate. Returns object The result of the evaluated grouping expression. Visit(Literal) Visits a Literal expression and returns its value, converting to double if possible. public object Visit(Literal literal) Parameters literal Literal The literal expression to evaluate. Returns object The value of the literal, possibly as a double. Visit(Unary) Visits a Unary expression and evaluates it according to its operator. public object Visit(Unary unary) Parameters unary Unary The unary expression to evaluate. Returns object The result of the unary operation. Visit(Variable) Visits a Variable expression and retrieves its value from the environment. public object Visit(Variable variable) Parameters variable Variable The variable expression to evaluate. Returns object The value of the variable from the environment. Visit(As) Implements the visitor method for the As statement. public void Visit(As statement) Parameters statement As The \"As\" statement to process. Visit(From) Implements the visitor method for the From statement. public void Visit(From from) Parameters from From The \"From\" statement to process. Visit(Print) Implements the visitor method for the Print statement. Evaluates the expression and writes its string representation to the console. public void Visit(Print print) Parameters print Print The print statement to execute. Visit(Select) Implements the visitor method for the Select statement. public void Visit(Select select) Parameters select Select The \"Select\" statement to process. Visit(Where) Implements the visitor method for the Where statement. public void Visit(Where where) Parameters where Where The \"Where\" statement to process."
  },
  "api/flx.SILQ.Core.Parser.html": {
    "href": "api/flx.SILQ.Core.Parser.html",
    "title": "Class Parser | SILQ",
    "summary": "Class Parser Namespace flx.SILQ.Core Assembly flx.SILQ.dll Provides utility methods for parsing tokens into expressions and statements in the SILQ language. public class Parser Inheritance object Parser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseExpression(List<Token>) Parses a list of tokens into an expression AST. public Expression ParseExpression(List<Token> tokens) Parameters tokens List<Token> The list of tokens to parse. Returns Expression The root flx.SILQ.Core.Parser.Expression() node. Exceptions ParserError Thrown if the token list is empty or parsing fails. ParseStatements(List<Token>) Parses a list of tokens into a list of statements. public List<Statement> ParseStatements(List<Token> tokens) Parameters tokens List<Token> The list of tokens to parse. Returns List<Statement> A list of parsed flx.SILQ.Core.Parser.Statement() objects."
  },
  "api/flx.SILQ.Core.Tokenizer.html": {
    "href": "api/flx.SILQ.Core.Tokenizer.html",
    "title": "Class Tokenizer | SILQ",
    "summary": "Class Tokenizer Namespace flx.SILQ.Core Assembly flx.SILQ.dll public class Tokenizer Inheritance object Tokenizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Tokenize(string[]) Tokenizes the input lines into a list of tokens. Handles keywords, operators, numbers, identifiers, strings, and comments. Adds error tokens for unexpected characters. public List<Token> Tokenize(string[] input) Parameters input string[] The input lines to tokenize. Returns List<Token> A list of Token objects representing the tokenized input."
  },
  "api/flx.SILQ.Core.html": {
    "href": "api/flx.SILQ.Core.html",
    "title": "Namespace flx.SILQ.Core | SILQ",
    "summary": "Namespace flx.SILQ.Core Classes Interpreter Provides core evaluation logic for the SILQ interpreter, including arithmetic operations, type checking, and expression evaluation. Parser Provides utility methods for parsing tokens into expressions and statements in the SILQ language. Tokenizer"
  },
  "api/flx.SILQ.Errors.ErrorToken.html": {
    "href": "api/flx.SILQ.Errors.ErrorToken.html",
    "title": "Class ErrorToken | SILQ",
    "summary": "Class ErrorToken Namespace flx.SILQ.Errors Assembly flx.SILQ.dll public record ErrorToken : IEquatable<ErrorToken> Inheritance object ErrorToken Implements IEquatable<ErrorToken> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ErrorToken(string, int, int) public ErrorToken(string Message, int Line, int Column) Parameters Message string Line int Column int Properties Column public int Column { get; init; } Property Value int Line public int Line { get; init; } Property Value int Message public string Message { get; init; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/flx.SILQ.Errors.ParserError.html": {
    "href": "api/flx.SILQ.Errors.ParserError.html",
    "title": "Class ParserError | SILQ",
    "summary": "Class ParserError Namespace flx.SILQ.Errors Assembly flx.SILQ.dll public class ParserError : Exception, ISerializable Inheritance object Exception ParserError Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ParserError(Token, string) public ParserError(Token token, string message) Parameters token Token message string Properties Token public Token Token { get; } Property Value Token"
  },
  "api/flx.SILQ.Errors.RuntimeError.html": {
    "href": "api/flx.SILQ.Errors.RuntimeError.html",
    "title": "Class RuntimeError | SILQ",
    "summary": "Class RuntimeError Namespace flx.SILQ.Errors Assembly flx.SILQ.dll Represents a runtime error that occurs during interpretation of SILQ code. public class RuntimeError : Exception, ISerializable Inheritance object Exception RuntimeError Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RuntimeError(string, string) Initializes a new instance of the RuntimeError class with a name and error message. public RuntimeError(string name, string message) Parameters name string The name associated with the error. message string The error message. RuntimeError(Token, string) Initializes a new instance of the RuntimeError class with a token and error message. public RuntimeError(Token token, string message) Parameters token Token The token where the error occurred. message string The error message. Properties Token public Token Token { get; } Property Value Token"
  },
  "api/flx.SILQ.Errors.html": {
    "href": "api/flx.SILQ.Errors.html",
    "title": "Namespace flx.SILQ.Errors | SILQ",
    "summary": "Namespace flx.SILQ.Errors Classes ErrorToken ParserError RuntimeError Represents a runtime error that occurs during interpretation of SILQ code."
  },
  "api/flx.SILQ.Expressions.Binary.html": {
    "href": "api/flx.SILQ.Expressions.Binary.html",
    "title": "Class Binary | SILQ",
    "summary": "Class Binary Namespace flx.SILQ.Expressions Assembly flx.SILQ.dll public record Binary : Expression, IEquatable<Expression>, IEquatable<Binary> Inheritance object Expression Binary Implements IEquatable<Expression> IEquatable<Binary> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Binary(Expression, Token, Expression) public Binary(Expression Left, Token Operator, Expression Right) Parameters Left Expression Operator Token Right Expression Properties Left public Expression Left { get; init; } Property Value Expression Operator public Token Operator { get; init; } Property Value Token Right public Expression Right { get; init; } Property Value Expression Methods Accept<T>(IVisitor<T>) public override T Accept<T>(IVisitor<T> visitor) Parameters visitor IVisitor<T> Returns T Type Parameters T"
  },
  "api/flx.SILQ.Expressions.Expression.html": {
    "href": "api/flx.SILQ.Expressions.Expression.html",
    "title": "Class Expression | SILQ",
    "summary": "Class Expression Namespace flx.SILQ.Expressions Assembly flx.SILQ.dll public abstract record Expression : IEquatable<Expression> Inheritance object Expression Implements IEquatable<Expression> Derived Binary Grouping Literal Unary Variable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Accept<T>(IVisitor<T>) public abstract T Accept<T>(IVisitor<T> visitor) Parameters visitor IVisitor<T> Returns T Type Parameters T"
  },
  "api/flx.SILQ.Expressions.Grouping.html": {
    "href": "api/flx.SILQ.Expressions.Grouping.html",
    "title": "Class Grouping | SILQ",
    "summary": "Class Grouping Namespace flx.SILQ.Expressions Assembly flx.SILQ.dll public record Grouping : Expression, IEquatable<Expression>, IEquatable<Grouping> Inheritance object Expression Grouping Implements IEquatable<Expression> IEquatable<Grouping> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Grouping(Expression) public Grouping(Expression Expression) Parameters Expression Expression Properties Expression public Expression Expression { get; init; } Property Value Expression Methods Accept<T>(IVisitor<T>) public override T Accept<T>(IVisitor<T> visitor) Parameters visitor IVisitor<T> Returns T Type Parameters T"
  },
  "api/flx.SILQ.Expressions.IVisitor-1.html": {
    "href": "api/flx.SILQ.Expressions.IVisitor-1.html",
    "title": "Interface IVisitor<T> | SILQ",
    "summary": "Interface IVisitor<T> Namespace flx.SILQ.Expressions Assembly flx.SILQ.dll public interface IVisitor<T> Type Parameters T Methods Visit(Binary) T Visit(Binary binary) Parameters binary Binary Returns T Visit(Grouping) T Visit(Grouping grouping) Parameters grouping Grouping Returns T Visit(Literal) T Visit(Literal literal) Parameters literal Literal Returns T Visit(Unary) T Visit(Unary unary) Parameters unary Unary Returns T Visit(Variable) T Visit(Variable variable) Parameters variable Variable Returns T"
  },
  "api/flx.SILQ.Expressions.Literal.html": {
    "href": "api/flx.SILQ.Expressions.Literal.html",
    "title": "Class Literal | SILQ",
    "summary": "Class Literal Namespace flx.SILQ.Expressions Assembly flx.SILQ.dll public record Literal : Expression, IEquatable<Expression>, IEquatable<Literal> Inheritance object Expression Literal Implements IEquatable<Expression> IEquatable<Literal> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Literal(object) public Literal(object Value) Parameters Value object Properties Value public object Value { get; init; } Property Value object Methods Accept<T>(IVisitor<T>) public override T Accept<T>(IVisitor<T> visitor) Parameters visitor IVisitor<T> Returns T Type Parameters T"
  },
  "api/flx.SILQ.Expressions.Unary.html": {
    "href": "api/flx.SILQ.Expressions.Unary.html",
    "title": "Class Unary | SILQ",
    "summary": "Class Unary Namespace flx.SILQ.Expressions Assembly flx.SILQ.dll public record Unary : Expression, IEquatable<Expression>, IEquatable<Unary> Inheritance object Expression Unary Implements IEquatable<Expression> IEquatable<Unary> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Unary(Token, Expression) public Unary(Token Operator, Expression Right) Parameters Operator Token Right Expression Properties Operator public Token Operator { get; init; } Property Value Token Right public Expression Right { get; init; } Property Value Expression Methods Accept<T>(IVisitor<T>) public override T Accept<T>(IVisitor<T> visitor) Parameters visitor IVisitor<T> Returns T Type Parameters T"
  },
  "api/flx.SILQ.Expressions.Variable.html": {
    "href": "api/flx.SILQ.Expressions.Variable.html",
    "title": "Class Variable | SILQ",
    "summary": "Class Variable Namespace flx.SILQ.Expressions Assembly flx.SILQ.dll Represents a variable expression in the syntax tree. public record Variable : Expression, IEquatable<Expression>, IEquatable<Variable> Inheritance object Expression Variable Implements IEquatable<Expression> IEquatable<Variable> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Variable(Token, Variable) Represents a variable expression in the syntax tree. public Variable(Token Name, Variable Member) Parameters Name Token The token representing the name of the variable. Member Variable An optional member variable, allowing for nested variable access. Properties Member An optional member variable, allowing for nested variable access. public Variable Member { get; init; } Property Value Variable Name The token representing the name of the variable. public Token Name { get; init; } Property Value Token Methods Accept<T>(IVisitor<T>) Accepts a visitor to process this variable expression. public override T Accept<T>(IVisitor<T> visitor) Parameters visitor IVisitor<T> The visitor that will process the variable expression. Returns T Type Parameters T"
  },
  "api/flx.SILQ.Expressions.html": {
    "href": "api/flx.SILQ.Expressions.html",
    "title": "Namespace flx.SILQ.Expressions | SILQ",
    "summary": "Namespace flx.SILQ.Expressions Classes Binary Expression Grouping Literal Unary Variable Represents a variable expression in the syntax tree. Interfaces IVisitor<T>"
  },
  "api/flx.SILQ.Models.Character.html": {
    "href": "api/flx.SILQ.Models.Character.html",
    "title": "Class Character | SILQ",
    "summary": "Class Character Namespace flx.SILQ.Models Assembly flx.SILQ.dll Represents a single character in the source input, including its value and position (line and column). public record Character : IEquatable<Character> Inheritance object Character Implements IEquatable<Character> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Character(char, int, int) Represents a single character in the source input, including its value and position (line and column). public Character(char Value, int Line, int Column) Parameters Value char Line int Column int Properties Column public int Column { get; init; } Property Value int Line public int Line { get; init; } Property Value int Value public char Value { get; init; } Property Value char Methods ToString() Returns a string representation of the character and its position in the format: 'Value (Line, Column)'. public override string ToString() Returns string"
  },
  "api/flx.SILQ.Models.Token.html": {
    "href": "api/flx.SILQ.Models.Token.html",
    "title": "Class Token | SILQ",
    "summary": "Class Token Namespace flx.SILQ.Models Assembly flx.SILQ.dll Represents a token identified by the SILQ tokenizer, including its type, lexeme, literal value, and line number. public record Token : IEquatable<Token> Inheritance object Token Implements IEquatable<Token> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Token(TokenType, string, object, int, int) Represents a token identified by the SILQ tokenizer, including its type, lexeme, literal value, and line number. public Token(TokenType TokenType, string Lexeme, object Literal = null, int Line = -1, int Column = -1) Parameters TokenType TokenType The type of the token. Lexeme string The string representation of the token as found in the source code. Literal object The literal value of the token, if applicable. Line int The line number where the token was found. Column int Properties Column public int Column { get; init; } Property Value int Lexeme The string representation of the token as found in the source code. public string Lexeme { get; init; } Property Value string Line The line number where the token was found. public int Line { get; init; } Property Value int Literal The literal value of the token, if applicable. public object Literal { get; init; } Property Value object TokenType The type of the token. public TokenType TokenType { get; init; } Property Value TokenType Methods ToString() Returns a formatted string representation of the token, including its type, lexeme, and literal value. public override string ToString() Returns string A string in the format: TokenType Lexeme Literal"
  },
  "api/flx.SILQ.Models.TokenType.html": {
    "href": "api/flx.SILQ.Models.TokenType.html",
    "title": "Enum TokenType | SILQ",
    "summary": "Enum TokenType Namespace flx.SILQ.Models Assembly flx.SILQ.dll Represents the different types of tokens that can be identified by the SILQ tokenizer. public enum TokenType Fields AND = 0 Logical AND AS = 1 'as' keyword BANG = 2 Bang '!' BANG_EQUAL = 3 Bang equal '!=' COMMA = 4 Comma ',' COUNT = 5 'count' keyword DOT = 6 Dot '.' EOF = 7 End of file/input EQUAL = 8 Equal '=' EQUAL_EQUAL = 9 Equal equal '==' FALSE = 10 Boolean literal 'false' FIRST = 11 'first' keyword FROM = 12 'from' keyword GREATER = 13 Greater '>' GREATER_EQUAL = 14 Greater equal '>=' IDENTIFIER = 16 Identifier (variable or function name) IN = 15 'in' keyword IS = 17 'is' keyword LAST = 18 'last' keyword LEFT_BRACE = 19 Left brace '{' LEFT_PAREN = 20 Left brace '(' LESS = 21 LESS_EQUAL = 22 LIKE = 23 'like' keyword MINUS = 24 Minus '-' NOT = 25 'not' keyword NULL = 26 Null literal NUMBER = 27 Number literal OR = 28 Logical OR PLUS = 29 Plus '+' PRINT = 30 'print' keyword RIGHT_BRACE = 31 Right brace '}' RIGHT_PAREN = 32 Right brace ')' SELECT = 33 'select' keyword SEMICOLON = 34 Semicolon ';' SLASH = 35 Slash '/' STAR = 36 Star '*' STRING = 37 String literal TRUE = 38 Boolean literal 'true' WHERE = 39 'where' keyword"
  },
  "api/flx.SILQ.Models.html": {
    "href": "api/flx.SILQ.Models.html",
    "title": "Namespace flx.SILQ.Models | SILQ",
    "summary": "Namespace flx.SILQ.Models Classes Character Represents a single character in the source input, including its value and position (line and column). Token Represents a token identified by the SILQ tokenizer, including its type, lexeme, literal value, and line number. Enums TokenType Represents the different types of tokens that can be identified by the SILQ tokenizer."
  },
  "api/flx.SILQ.Statements.As.html": {
    "href": "api/flx.SILQ.Statements.As.html",
    "title": "Class As | SILQ",
    "summary": "Class As Namespace flx.SILQ.Statements Assembly flx.SILQ.dll Represents an 'As' statement in the SILQ language. public record As : Statement, IEquatable<Statement>, IEquatable<As> Inheritance object Statement As Implements IEquatable<Statement> IEquatable<As> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This statement is used to define a specific behavior or operation in the SILQ language. It inherits from the base Statement class and implements the IVisitor pattern. Constructors As(Token) Represents an 'As' statement in the SILQ language. public As(Token Name) Parameters Name Token Remarks This statement is used to define a specific behavior or operation in the SILQ language. It inherits from the base Statement class and implements the IVisitor pattern. Properties Name public Token Name { get; init; } Property Value Token Methods Accept(IVisitor) Accepts a visitor that implements the IVisitor interface. public override void Accept(IVisitor visitor) Parameters visitor IVisitor The visitor to accept."
  },
  "api/flx.SILQ.Statements.From.html": {
    "href": "api/flx.SILQ.Statements.From.html",
    "title": "Class From | SILQ",
    "summary": "Class From Namespace flx.SILQ.Statements Assembly flx.SILQ.dll Represents a \"from\" statement in the SILQ language. This statement is used to specify the source of data for a query. public record From : Statement, IEquatable<Statement>, IEquatable<From> Inheritance object Statement From Implements IEquatable<Statement> IEquatable<From> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors From(Expression) Represents a \"from\" statement in the SILQ language. This statement is used to specify the source of data for a query. public From(Expression Expression) Parameters Expression Expression Properties Expression public Expression Expression { get; init; } Property Value Expression Methods Accept(IVisitor) Accepts a visitor to process this from statement. public override void Accept(IVisitor visitor) Parameters visitor IVisitor The visitor that will process the from statement."
  },
  "api/flx.SILQ.Statements.IVisitor.html": {
    "href": "api/flx.SILQ.Statements.IVisitor.html",
    "title": "Interface IVisitor | SILQ",
    "summary": "Interface IVisitor Namespace flx.SILQ.Statements Assembly flx.SILQ.dll Visitor interface for statement nodes in the SILQ AST. Implementations should provide logic for each supported statement type. public interface IVisitor Methods Visit(As) Visits a As statement node. void Visit(As statement) Parameters statement As The as statement to visit. Visit(From) Visits a From statement node. void Visit(From statement) Parameters statement From The from statement to visit. Visit(Print) Visits a Print statement node. void Visit(Print statement) Parameters statement Print The print statement to visit. Visit(Select) Visits a Select statement node. void Visit(Select statement) Parameters statement Select The select statement to visit. Visit(Where) Visits a Where statement node. void Visit(Where statement) Parameters statement Where The where statement to visit."
  },
  "api/flx.SILQ.Statements.Print.html": {
    "href": "api/flx.SILQ.Statements.Print.html",
    "title": "Class Print | SILQ",
    "summary": "Class Print Namespace flx.SILQ.Statements Assembly flx.SILQ.dll Represents a print statement in the SILQ language. When executed, evaluates the contained expression and outputs its value. public record Print : Statement, IEquatable<Statement>, IEquatable<Print> Inheritance object Statement Print Implements IEquatable<Statement> IEquatable<Print> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Print(Expression) Represents a print statement in the SILQ language. When executed, evaluates the contained expression and outputs its value. public Print(Expression Expression) Parameters Expression Expression The expression to be printed. Properties Expression The expression to be printed. public Expression Expression { get; init; } Property Value Expression Methods Accept(IVisitor) Accepts a visitor to process this print statement. public override void Accept(IVisitor visitor) Parameters visitor IVisitor The visitor that will process the print statement."
  },
  "api/flx.SILQ.Statements.Select.html": {
    "href": "api/flx.SILQ.Statements.Select.html",
    "title": "Class Select | SILQ",
    "summary": "Class Select Namespace flx.SILQ.Statements Assembly flx.SILQ.dll Represents a \"Select\" statement in the SILQ language. public record Select : Statement, IEquatable<Statement>, IEquatable<Select> Inheritance object Statement Select Implements IEquatable<Statement> IEquatable<Select> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Select(Expression[]) Represents a \"Select\" statement in the SILQ language. public Select(Expression[] Expressions) Parameters Expressions Expression[] Properties Expressions public Expression[] Expressions { get; init; } Property Value Expression[] Methods Accept(IVisitor) Accepts a visitor to process this \"Select\" statement. public override void Accept(IVisitor visitor) Parameters visitor IVisitor The visitor that processes this statement."
  },
  "api/flx.SILQ.Statements.Statement.html": {
    "href": "api/flx.SILQ.Statements.Statement.html",
    "title": "Class Statement | SILQ",
    "summary": "Class Statement Namespace flx.SILQ.Statements Assembly flx.SILQ.dll Represents the abstract base class for all statement nodes in the SILQ abstract syntax tree (AST). public abstract record Statement : IEquatable<Statement> Inheritance object Statement Implements IEquatable<Statement> Derived As From Print Select Where Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Accept(IVisitor) Accepts a visitor that processes this statement node. public abstract void Accept(IVisitor visitor) Parameters visitor IVisitor The visitor to process the statement."
  },
  "api/flx.SILQ.Statements.Where.html": {
    "href": "api/flx.SILQ.Statements.Where.html",
    "title": "Class Where | SILQ",
    "summary": "Class Where Namespace flx.SILQ.Statements Assembly flx.SILQ.dll Represents a \"Where\" statement in the SILQ language. public record Where : Statement, IEquatable<Statement>, IEquatable<Where> Inheritance object Statement Where Implements IEquatable<Statement> IEquatable<Where> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This statement is used to filter elements based on a condition. Constructors Where(Expression) Represents a \"Where\" statement in the SILQ language. public Where(Expression Expression) Parameters Expression Expression The condition or set of conditions to filter elements. Remarks This statement is used to filter elements based on a condition. Properties Expression The condition or set of conditions to filter elements. public Expression Expression { get; init; } Property Value Expression Methods Accept(IVisitor) Accepts a visitor to process this \"Where\" statement. public override void Accept(IVisitor visitor) Parameters visitor IVisitor The visitor that processes this statement."
  },
  "api/flx.SILQ.Statements.html": {
    "href": "api/flx.SILQ.Statements.html",
    "title": "Namespace flx.SILQ.Statements | SILQ",
    "summary": "Namespace flx.SILQ.Statements Classes As Represents an 'As' statement in the SILQ language. From Represents a \"from\" statement in the SILQ language. This statement is used to specify the source of data for a query. Print Represents a print statement in the SILQ language. When executed, evaluates the contained expression and outputs its value. Select Represents a \"Select\" statement in the SILQ language. Statement Represents the abstract base class for all statement nodes in the SILQ abstract syntax tree (AST). Where Represents a \"Where\" statement in the SILQ language. Interfaces IVisitor Visitor interface for statement nodes in the SILQ AST. Implementations should provide logic for each supported statement type."
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | SILQ",
    "summary": "Getting Started"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | SILQ",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "specs/index.html": {
    "href": "specs/index.html",
    "title": "SILQ Language Specification v1 | SILQ",
    "summary": "SILQ Language Specification v1 SILQ (Simple Interpreted Language for Queries) is a lightweight, expressive language designed to query .NET object data in a simple, human-readable way. It is crafted to provide developers with a minimal, easy-to-learn scripting environment that can be quickly embedded into applications for powerful object querying without the overhead of complex query engines. Objectives Simplicity First SILQ is built around the idea that querying object data should be easy to write, easy to read, and easy to understand. It avoids unnecessary complexity, focusing on what matters most: expressing conditions and selecting results in a natural, straightforward manner. Natural Syntax Inspired by familiar concepts from SQL and LINQ, SILQ queries resemble plain English instructions. This lowers the learning curve and makes queries self-explanatory even for developers who have not been extensively trained in query languages. Dynamic Execution SILQ is interpreted at runtime. This makes it highly flexible, ideal for scenarios where queries must be defined dynamically, configured externally, or updated without recompiling an application. Strict and Predictable Behavior While SILQ is dynamically typed, it enforces strict typing on operations like comparisons, arithmetic, and logical conditions to ensure that queries behave consistently and safely. Lightweight Integration SILQ is designed to integrate easily into .NET applications with minimal dependencies. It relies on standard reflection capabilities to access and traverse object properties, making it a perfect fit for internal tooling, user-defined queries, or low-overhead data transformation tasks. Scope SILQ focuses on a small but powerful set of features: Filtering collections based on flexible conditions Selecting and projecting fields or computed expressions Counting, picking the first, or picking the last matching item Accessing nested properties through simple dot notation Performing basic logical, arithmetic, and string operations Supporting intuitive membership and comparison checks By intentionally limiting its scope, SILQ ensures developers have everything they need to query and shape their data—without overwhelming them with options or complexity. SILQ’s vision is to empower developers to work with data inside their applications as naturally and effortlessly as possible, while remaining lightweight, transparent, and easy to extend in future versions."
  },
  "specs/lexical-structure.html": {
    "href": "specs/lexical-structure.html",
    "title": "Lexical Structure | SILQ",
    "summary": "Lexical Structure General The following page outlines the structure and components of SILQ and is intended for developers interested to implement SILQ for other platforms. Syntax Grammar The syntax grammar is used to parse the linear sequence of tokens into a nested syntax tree structure (AST). It starts with the first rule that matches an entire SILQ script. The documentation is using a flavour of the Backus-Naur form: Rules : name → symbol Terminals: \"quoted\" Non-Terminals: lowercase Grouping: (Parentheses) Repition: * Optional: ? One or more: + Scripts A SILQ script consists of one or more queries. Queries may be presented as a string or file. Each string/file is one script and executed as a unit. The script executes in three steps: Lexical analysis, which translates the presented input into a stream of tokens. Syntactic analysis, which translates the stream of tokens into a executable structure Execution, which executes every instruction in the structure and computes the return value script → query* EOF ; Queries Every query requires three parts, the \"from\" keyword, an object and a where_clause. These three core parts allow to identify the queried object and the data required. Furthermore, a query can contain a modifier, a projection and an alias. These extend the script capabilities beyond pure filtering and intents to make the language more useful. query → modifier? \"from\" object where_clause projection? alias? \";\" ; Modifiers SILQ is providing three modifiers to modify the result set: first, last, count. Modifiers are optional, but only one is allowed per query. modifier → \"first\" | \"last\" | \"count\" ; Objects Objects allow access to data structures provided by the framework implementing SILQ. The object can be accesses to using an IDENTIFIER. Members can be accessed using the dot-notation. Members with a private, protected, internal or similar access modifier will be ignored where applicable. object → IDENTIFIER ( ( \".\" member? )? )* ; member → IDENTIFIER ; Where Clauses The where clause allows to write filter conditions using an expression or function. The members used in the condition must be publicly accessable. The object member access rules apply. where_clause → \"where\" condition ; condition → expression | function ; Projections Projections allow to choose specific members of an object with the select keyword followed by the members to be projected. The object member access rules apply. The projected members can be access using the alias followed by the member IDENTIFIER. The projection will be available once an alias has been defined and the query has concluded. projection → \"select\" \"{\" member ( \",\" member)* \"}\" ; Aliases Aliases act in the capacity of variables and make the result of an query available for further use throughout the script. An alias IDENTIFIER can only be used once, it's value can not be changed. Note While defining an alias is optional, projections make only sense if an alias is defined. alias → \"alias\" IDENTIFIER ; Function Functions allow the access to functionality provided by the underlying framework. This means, that depending on framework choice, functions may behave differently. Functions can not be declared with SILQ. function → IDENTIFIER \"(\" parameter? \")\" ; parameter → IDENTIFIER ( \",\" IDENTIFIER )* ; Expression An expression produces a new value by applying operators to a set of given values. The below grammar outlines the available operations as well as precedence. expression → or * ; or → and ( \"or\" and )* ; and → equality ( \"and\" equality )* ; equality → comparison ( ( \"!=\" | \"==\" ) comparison )* ; comparison → term ( ( \"<\" | \"<=\" | \">\" | \">=\" ) term )* ; term → factor ( ( \"-\" | \"+\" ) factor )* ; factor → unary ( ( \"/\" | \"*\" ) unary )* ; unary → ( \"!\" | \"-\" ) unary | primary ; primary → \"true\" | \"false\" | \"null\" | \"(\" expression \")\" | NUMBER | STRING | IDENTIFIER | DATE Lexical Grammar The lexical grammer is used by the scanner to group characters into tokens. Where the syntax grammar is context free, the lexical grammar is regular - note that there are no recursive rules. NUMBER → DIGIT+ ( \".\" DIGIT+ )? ; STRING → \"\\\"\" <any char except \"\\\"\"\\>* \"\\\"\" IDENTIFIER → ALPHA ( ALPHA | DIGIT )* ; ALPHA → [a-zA-z_] ; DIGIT → [0-9] ; DATE → \"YYYY-MM-DD\""
  }
}